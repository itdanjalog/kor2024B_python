정렬(sort) : 데이터/자료 들을 일정한 순서 대로 나열
    - 정렬된 데이터 들은 검색이 빠르다. [ 검색 속도 향상 ]
    - 오름차순 ASC , 내림차순 DESC
        오름차순 : 1 2 3 4 , A B C D , 가 나 다 라 , 07/25 07/26 07/27
        내림차순 : 4 3 2 1 , D C B A , 라 다 나 가 , 07/27 07/26 07/25
        - 교환 정렬
            - swap : 두 변수의 값 교체 하기
                - 두 변수가 가지고 있는 값을 서로 바꿔 치기
                a = 3
                b = 5
                -----
            -- 일반적인 방법 1
                temp : 임시 변수
                1. temp = a     -- 임시변수에 3를 대입하고
                2. a = b        -- a변수에 5를 대입하고
                3. b = temp     -- b변수에 temp(3) 를 대입하고
                a = 5 , b = 3
            - 파이썬 문법 방법 2
                a , b = b , a
                a = 5 , b = 3
    - 종류
        1. 선택 정렬 , Selection Sort
            - 여러 데이터들 중에서 가장 작은값/큰값 을 뽑는 과정을 반복하여 값 정렬 방법이다.
            - 최솟 값을 찾아서 순서 대로 배치 => 오름 차순
            - 최댓 값을 찾아서 순서 대로 배치 => 내림 차순
            [ 188 , 162 , 168 , 120 , 50 ]  -가장 작은값 찾아서-->        50
            [ 188 , 162 , 168 , 120 ]       -가장 작은값 찾아서-->        50 , 120
            [ 188 , 162 , 168  ]            -가장 작은값 찾아서-->        50 , 120 , 162
            [ 188 , 168  ]                  -가장 작은값 찾아서-->        50 , 120 , 162 , 168
            [ 188 ]                         -가장 작은값 찾아서-->        50 , 120 , 162 , 168 , 188
        2. 삽입 정렬 , Insertion sort
            - 기존 데이터들 중에서 자신의 위치를 찾아서 데이터를 삽입/교환 하는 정렬

        3. 버블 정렬 , Bubble sort
            -
        4. 퀵 정렬 , Quick sort
        등등


1. 선택 정렬 (Selection Sort)
정의: 선택 정렬은 배열에서 가장 작은(또는 큰) 요소를 찾아 첫 번째 요소와 교환하는 방식으로 정렬하는 알고리즘입니다. 매번 남은 배열에서 최소값을 찾아 정렬된 부분을 확장해 나갑니다. 과정:
배열의 첫 번째 요소를 기준으로 나머지 요소 중에서 가장 작은 값을 찾아 교환.
그 다음 두 번째 요소를 기준으로 나머지 요소에서 가장 작은 값을 찾아 교환.
이 과정을 마지막까지 반복. 시간 복잡도: O(n²) 장점: 구현이 간단함. 단점: 데이터의 크기가 클수록 비효율적임.

2. 삽입 정렬 (Insertion Sort)
정의: 삽입 정렬은 현재 위치의 요소를 이미 정렬된 부분과 비교하여 적절한 위치에 삽입하는 방식으로 정렬하는 알고리즘입니다. 과정:
두 번째 요소부터 시작하여 그 앞의 요소들과 비교하며 적절한 위치에 삽입.
이를 배열의 끝까지 반복. 시간 복잡도: O(n²) 장점: 거의 정렬된 배열에서 효율적임. 단점: 큰 데이터셋에 비효율적임.

3. 버블 정렬 (Bubble Sort)
정의: 버블 정렬은 인접한 두 요소를 비교하여 필요에 따라 교환하면서 정렬하는 방식으로, 큰 값이 거품처럼 배열의 끝으로 이동하는 알고리즘입니다. 과정:
첫 번째 요소와 두 번째 요소를 비교하여 더 큰 값을 뒤로 보냄.
이를 배열 끝까지 반복하고, 마지막 요소는 정렬된 상태로 간주.
매번 비교 범위를 줄여가며 반복. 시간 복잡도: O(n²) 장점: 구현이 간단함. 단점: 모든 경우에서 비효율적이며, 매우 느림.

4. 퀵 정렬 (Quick Sort)
정의: 퀵 정렬은 분할 정복 기법을 사용한 정렬 알고리즘으로, 피벗(pivot)을 기준으로 작은 값과 큰 값을 나누어 각각 재귀적으로 정렬하는 방식입니다. 과정:
배열에서 피벗을 선택.
피벗보다 작은 값들은 왼쪽에, 큰 값들은 오른쪽에 배치.
이 과정을 재귀적으로 반복하여 정렬. 시간 복잡도: 평균 O(n log n), 최악의 경우 O(n²) 장점: 평균적으로 매우 빠름. 단점: 잘못된 피벗 선택 시 성능 저하.

차이점 요약
알고리즘 복잡도: 퀵 정렬은 평균적으로 가장 빠르며, 나머지 세 가지(선택, 삽입, 버블 정렬)는 O(n²)로 느림.
안정성: 삽입 정렬과 버블 정렬은 안정적인 정렬 알고리즘(동일한 값의 순서가 유지됨)이지만, 선택 정렬과 퀵 정렬은 그렇지 않음.
사용 환경: 퀵 정렬은 대규모 데이터에 적합하고, 삽입 정렬은 거의 정렬된 데이터에 효율적임.