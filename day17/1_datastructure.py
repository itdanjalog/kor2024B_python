'''
    자료구조
        - 컴퓨터 과학 에서 *효율 적인 자료의 관리,저장,조직 하는 방법
        - 왜? 특정 기준 으로 자료를 정리를 해두면 검색,정렬,통계 할때 유용 하다.
        - 대표 : 리스트 , 스택 , 큐 , 트리 , 그래프  등등
        - 회사 기술 면접(코테) , 상황[후입선출]에 따라 효율 극대화 할수 있는 실무 에서도 사용.
            - 파이썬으로 표현/구현

    [1] 스택
        - 데이터를 저장하는 선형 자료구조
        - Last in First Out : (LIFO) 원칙 , 후입선출
            - 마지막 에 들어온 자료가 가장 먼저 나간다.
        - 데이터의 추가와 제거가 매우 간단하고 빠르다.
        - 생활속 : 프링글스과자상자 , 동전케이스 , 뒤로가기 , 재귀알고리즘
            - 입구 와 출구 가 하나로 존재 하는 구역
        - 용어 :
            1. PUSH : 스택구조에 데이터를 추가하는 연산 , 새로운 데이터 는 항상 스택 구조 의 맨위에 위치 한다.
            2. POP : 스택구조에 데이터를 제거하고 반환하는 연산 , 가장 최근에 추가된 데이터가 제거 된다.
            3. Peek : 스택구조의 맨 위에 있는 데이터를 반환 연산 , 제거는 하지 않는다. 스택구조의 최상위 확인용.

            PUSH      POP
            ----->    ----->
                |      |
                |      |    <---- top : 가장 위에 있는 데이터의 위치 기억
                |      |
                |______|

    [2] 큐
        - 데이터 저장하는 선형 자료구조
        - First in First Out : ( FIFO ) 원칙 , 선입선출
        - 생활속 : 줄서기 , BFS 알고리즘 , 프린터 등등
            - 입구 와 출구 가 각 존재하는 구역
        - 용어
            1. Enqueue : 큐에 데이터를 추가하는 연산 , 새로운 데이터는 항상 큐의 맨 뒤에 추가된다.
            2. Dequeue : 큐에 데이터를 제거하고 반환하는 연산 , 가장 처음에 추가된  데이터가 제거된다.
            3. Peek : 큐의 맨 앞에 있는 데이터를 반환 , 제거하지는 않는다, 첫번째 데이터를 확인용

                ---------------------
    -Enqueue-->                         --Dequeue->
                ---------------------
'''
# [1] 파이썬 에서 스택 구조를 구현 하는 방법
    # (1) 스택구조에 저장할 자료들의 목록을 리스트로 구현
stack = [ None , None , None , None , None ]    # None 데이터 가 없다는 뜻
    # (2) 현재 가장 위에 있는 데이터의 위치 기억
top = -1    # -1 는 현재 스택구조의 데이터가 하나도 없다.

print( stack )

# [2] 데이터 push
top += 1                  # 위치 한칸 올리기
stack[ top ] = '커피'     # 커피 대입
print( stack )

top += 1                # 위치 한칸 올리기
stack[ top ] = '녹차'    # 녹차 대입
print( stack )

top += 1
stack[ top ] = '꿀물'
print( stack )

# [3] 데이터 pop
stack[top] = None       # 가장 위에 위치한 데이터를 None 변경
top -= 1                # 위치 한칸 내리기
print( stack )

stack[top] = None       # 가장 위에 위치한 데이터를 None 변경
top -= 1                # 위치 한칸 내리기
print( stack )

stack[top] = None       # 가장 위에 위치한 데이터를 None 변경
top -= 1                # 위치 한칸 내리기
print( stack )

# [2] 파이썬 에서 큐 구조를 구현 하는 방법
    # (1) 큐 구조에 저장할 자료들의 목록을 리스트로 구현
queue = [ None , None , None , None , None ]
    # (2) 들어오고 나가는 데이터의 위치 기억
front = -1  # 나가는 인덱스 위치 기억
rear = -1   # 들어오는 인덱스 위치 기억

# 데이터 Enqueue
rear += 1   # 들어오는 인덱스 위치 증가
queue[ rear ] = "유재석"
print( queue )

rear += 1   # 들어오는 인덱스 위치 증가
queue[ rear ] = "강호동"
print( queue )

rear += 1   # 들어오는 인덱스 위치 증가
queue[ rear ] = "서장훈"
print( queue )

# 데이터 Dequeue
front += 1          # 나가는 인덱스 위치 증가
queue[ front ] = None
print( queue )

front += 1          # 나가는 인덱스 위치 증가
queue[ front ] = None
print( queue )

front += 1          # 나가는 인덱스 위치 증가
queue[ front ] = None
print( queue )

