예외 처리
    - 오류[ Error ] :
        - 시스템이 종료 되어야 할 수준의 상황 과 같이 개발자가 수습할수 없는 심각한문제
        - 개발자가 미리 예측/방지 할 수 없다. 주로 하드웨어(메모리) 관련된 오류가 발생한다.
    - 예외[ Exception ] :
        - 개발자가 구현한 로직에서 발생한 실수 나 사용자의 영향에 의해 발생 하는 문제
        - 오류 와 달리 개발자가 미리 예측/방지 할 수 있기에 상황에 맞게 예외 처리를 해야한다.
        - 개발자 예측 ---> 개발자가 경험 풍부 ---> 개발자 경험의 의존성이 크다.
        - 코드를 수정 하는 작업이 아닌 예외가 발생 했을때 흐름 제어 방식 , if 비슷하다.
    - 목적 : 문제 또는 오류가 발생하면 프로그램은 자동으로 강제 종료 된다. 사용자 는 불편 하다.
        즉] 예외가 발생 하더라도 프로그램은 24시간 종료되지 않고 서비스를 제공해야 한다. 안전한 프로그램 제공
    - 예외처리 문법
        try :
            예외가 발생 하거나 발생 할 것 같은 코드(예측)
        except 예외클래스 as 변수명 :
            만약에 try 에서 예외가 발생 했을때 실행 되는 코드
        finally :
            예외 발생 여부와 상관없이 무조건 실행되는 코드
    - pass 키워드 : 아무것도 하지 않을때 사용하는 키워드 # pass
    - raise 키워드 : 강제로 예외 발생 시키는 키워드 # raise 클래스명

    - 예외 클래스
        0. Exception 클래스  # 다중 except 사용시 가장 마지막에 사용한다.
        1. IndexError클래스
        2. ZeroDivisionError클래스
        3. ValueError클래스
        4. KeyError클래스  등등등